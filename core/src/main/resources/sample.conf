akka {


  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    extensions = ["akka.contrib.pattern.DistributedPubSubExtension"]
  }
  remote {
  transport = "akka.remote.netty.NettyRemoteTransport"
   enabled-transports = ["akka.remote.netty.tcp"]
    log-remote-lifecycle-events = on
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }

  cluster {
    roles = ["worker","master"]
    seed-nodes = ["akka.tcp://StreamManager@127.0.0.1:2551","akka.tcp://StreamManager@127.0.0.1:2552"]
     auto-down-unreachable-after = 10s
                  retry-unsuccessful-join-after = 5s

    metrics.enabled=off
  }

  contrib.cluster.pub-sub {
         # Actor name of the mediator actor, /user/streamMediator
         name = streamMediator

         # Start the mediator on members tagged with this role.
         # All members are used if undefined or empty.
         #role = "worker"

         # The routing logic to use for 'Send'
         # Possible values: random, round-robin, broadcast
         #routing-logic = broadcast

         # How often the DistributedPubSubMediator should send out gossip information
         gossip-interval = 1s

         # Removed entries are pruned after this duration
         removed-time-to-live = 120s

         # Maximum number of elements to transfer in one message when synchronizing the registries.
         # Next chunk will be transferred in next round of gossip.
         max-delta-elements = 3000

     }


          extensions = ["akka.contrib.pattern.DistributedPubSubExtension"]
loglevel = INFO
 debug {
# enable function of LoggingReceive, which is to log any received message at
# DEBUG level
receive = on
}

//  deployment {
//    /singleton/statsService/workerRouter {
//      router = consistent-hashing-pool
//      nr-of-instances = 100
//      cluster {
//        enabled = on
//        max-nr-of-instances-per-node = 3
//        allow-local-routees = on
//        use-role = compute
//      }
//    }
//  }
}

